version: '3'

services:
    nginx:
        image: nginx:${NGINX_VERSION}
        ports:
            - ${NGINX_PORT}:80
        networks:
            - appNet
            - dbNet
        volumes:
            - ./env/.config/nginx.conf:/etc/nginx/conf.d/default.conf
            - ./www:/var/www
        depends_on:
          - php

    php:
        image: php:${PHP_VERSION}
        expose:
            - 9000
        networks:
            - appNet
        volumes:
            - ./www:/var/www
        working_dir: /var/www

    composer:
        image: composer/composer:${COMPOSER_VERSION}
        command: ${COMPOSER_COMMAND}
        networks:
            - appNet
        volumes:
            - ./www:/app

    mysql:
        image: mysql:${MYSQL_VERSION}
        ports:
            - ${MYSQL_PORT}:3306
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE_NAME}
            MYSQL_USER: ${ADMIN_USERNAME}
            MYSQL_PASSWORD: ${ADMIN_PASSWORD}
        networks:
            - dbNet
            - trackerNet
        volumes:
            - mysqlData:/var/lib/mysql

    phpmyadmin:
        image: phpmyadmin/phpmyadmin:${PHPMYADMIN_VERSION}
        ports:
            - ${PHPMYADMIN_PORT}:80
        environment:
            PMA_HOST: mysql
        networks:
            - dbNet
        depends_on:
            - mysql

    #todo: password protect database, set in config.yml
    redis:
        image: redis:${REDIS_VERSION}
        ports:
            - ${REDIS_PORT}:6379
        networks:
            - trackerNet
        volumes:
            - redisData:/data
            - ./env/.config/redis.conf:/usr/local/etc/redis/redis.conf
        command: redis-server /usr/local/etc/redis/redis.conf

    phpredmin:
        image: sasanrose/phpredmin:${PHPREDMIN_VERSION}
        ports:
            - ${PHPREDMIN_PORT}:80
        networks:
            - trackerNet
        volumes:
            - ./env/.config/phpredmin.php:/var/www/html/phpredmin/config.php
        depends_on:
            - redis

    #todo: generate key on build, avoid user input
    icemika:
        build:
            context: ./env/containers/icemika
            dockerfile: ./DockerFile
        networks:
            - trackerNet
        volumes:
            - ./env/src/github.com/Goon3r/icemika:/go/src/github.com/Goon3r/iceMika
            - ./env/.config/icemika.json:/go/src/github.com/Goon3r/iceMika/config.json
        depends_on:
            - mysql
            - redis

    postgres:
        image: postgres:${POSTGRES_VERSION}
        ports:
            - ${POSTGRES_PORT}:5432
        environment:
            POSTGRES_USER: ${ADMIN_USERNAME}
            POSTGRES_PASSWORD: ${ADMIN_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DATABASE}
        networks:
            - postgresNet
        volumes:
            - postgresData:/var/lib/postgresql/data

    #todo: look into enabline postgres ssl so ?sslmode can be removed - https://gist.github.com/likwid/86193ef581c530ea55d3
    pgweb:
        build:
            context: ./env/containers/pgweb
            dockerfile: ./DockerFile
        ports:
            - ${PGWEB_PORT}:8081
        environment:
            DATABASE_URL: postgres://${ADMIN_USERNAME}:${ADMIN_PASSWORD}@postgres:5432/${POSTGRES_DATABASE}?sslmode=disable
            PGWEB_AUTH_USER: ${ADMIN_USERNAME}
            PGWEB_AUTH_PASS: ${ADMIN_PASSWORD}
        networks:
            - postgresNet
        depends_on:
          - postgres

networks:
    appNet:
        driver: bridge
    dbNet:
        driver: bridge
    postgresNet:
        driver: bridge
    trackerNet:
        driver: bridge

volumes:
    mysqlData:
        driver: local
    postgresData:
        driver: local
    redisData:
        driver: local